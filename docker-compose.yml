services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: poc
      POSTGRES_USER: poc
      POSTGRES_PASSWORD: poc_pass
    ports: ["5432:5432"]
    volumes: ["pgdata:/var/lib/postgresql/data"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U poc -d poc"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - django_net

  minio:
    image: quay.io/minio/minio
    container_name: minio_s3
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio-data:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      minio server /data --console-address ':9001' &
      sleep 10;
      mc alias set myminio http://localhost:9000 admin password;
      mc mb myminio/my-bucket --ignore-existing;
      tail -f /dev/null"
    networks:
      - django_net
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - django_net
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - django_net
  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - django_net
  web:
    build: .
    command: sh -c "until pg_isready -h db -p 5432 -U poc -d poc; do echo 'Database is unavailable - sleeping'; sleep 2; done && echo 'Database is ready - continuing with startup' && python manage.py migrate && sleep 10 && python manage.py run_migration_truncate_load --wait-for-minio=30 && python manage.py run_kafka_consumer --group-id=ingest-consumer-group --batch-size=1000 & python manage.py runserver 0.0.0.0:8000"
    volumes: 
      - "./Data:/app/data"
      - "./.dlt:/app/.dlt"
    ports: ["8000:8000"]
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_started
      kafka:
        condition: service_started
      schema-registry:
        condition: service_started
    environment:
      - DJANGO_ALLOWED_HOSTS=*
      - POSTGRES_DB=poc
      - POSTGRES_USER=poc
      - POSTGRES_PASSWORD=poc_pass
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=password
      - MINIO_BUCKET_NAME=my-bucket
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
    networks:
      - django_net


networks:
  django_net:

volumes:
  pgdata:
  miniodata:

